import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:intl/intl.dart';
import 'package:qr_flutter/qr_flutter.dart';
import 'package:path_provider/path_provider.dart';
import 'package:flutter/material.dart' hide Image;
import 'package:esc_pos_printer/esc_pos_printer.dart';
import 'package:flutter/services.dart';
import 'package:ping_discover_network/ping_discover_network.dart';
import 'package:esc_pos_utils/esc_pos_utils.dart';
import 'package:image/image.dart';
import 'package:trady/data/data.dart';
import 'package:trady/data/jsonnew.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:wifi/wifi.dart';

class WifiPrinter extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<WifiPrinter> {
  String localIp = '';
  List<String> devices = [];
  bool isDiscovering = false;
  int found = -1;
  TextEditingController portController = TextEditingController(text: '9100');
  @override
  void initState() {
    super.initState();
   urlText="https://techsapphire.net";

    main();
  }

  void discover(BuildContext ctx) async {
    setState(() {
      isDiscovering = true;
      devices.clear();
      found = -1;
    });

    String ip;
    try {
      ip = await Wifi.ip;
      print('local ip:\t$ip');
    } catch (e) {
      final snackBar = SnackBar(
          content: Text('WiFi is not connected', textAlign: TextAlign.center));
      Scaffold.of(ctx).showSnackBar(snackBar);
      return;
    }
    setState(() {
      localIp = ip;
    });

    final String subnet = ip.substring(0, ip.lastIndexOf('.'));
    int port = 9100;
    try {
      port = int.parse(portController.text);
    } catch (e) {
      portController.text = port.toString();
    }
    print('subnet:\t$subnet, port:\t$port');

    final stream = NetworkAnalyzer.discover2(subnet, port);

    stream.listen((NetworkAddress addr) {
      if (addr.exists) {
        print('Found device: ${addr.ip}');
        setState(() {
          devices.add(addr.ip);
          found = devices.length;
        });
      }
    })
      ..onDone(() {
        setState(() {
          isDiscovering = false;
          found = devices.length;
        });
      })
      ..onError((dynamic e) {
        final snackBar = SnackBar(
            content: Text('Unexpected exception', textAlign: TextAlign.center));
        Scaffold.of(ctx).showSnackBar(snackBar);
      });
  }

  Autogenerated autodata;
  var printerlist;
  var seen = Set<String>();
  main() {
    String complexText =

"""{
    "Total": "15.70",
    "GrandTotal": "15.70",
    "BillSummary": [
        {
            "key": "Total Item(s)",
            "value": "1"
        },
        {
            "key": "Discount",
            "value": "0.00"
        },
        {
            "key": "Delivery",
            "value": "0.00"
        },
        {
            "key": "VAT 15%",
            "value": "2.04"
        },
        {
            "key": "Paid Amount",
            "value": "15.70"
        }
    ],
    "Header": {
        "HotelName": "TradyWork",
        "Phone": "Tel: 0532300616",
        "currency": "SR",
        "Address": "سيهات - حي الطف - شارع مكه",
        "Address1": "",
        "Address2": "",
        "BillNo": "000076",
        "DateOfBill": "03/02/2022",
        "TimeOfBill": "13:21",
        "OrderType": "Dine In",
        "Table": "Table 02",
        "FssaiNo": "",
        "GSTNo": "",
        "CustomerRemarks": "",
        "OrderNote": ""
    },
    "Item": [
        {
            "No": "107",
            "ItemAmt": "8.70",
            "ItemName": "Chicken Chow Mein small mai nahi khana",
            "alternate_name": "চিকেন চৌ মেইন عربي",
            "itemaddons": "",
            "Qty": "1",
            "menu_note": "",
            "Rate": "8.70",
            "modifiers": [
                "Beet Salada(3.00)",
                "Seasoned Fries(4.00)"
            ],
            "printer_name": "XP-80"
        },
         {
            "No": "107",
            "ItemAmt": "8.70",
            "ItemName": "Paneer cousine large bottle",
            "alternate_name": "চিকেন চৌ মেইন عربي",
            "itemaddons": "",
            "Qty": "1",
            "menu_note": "",
            "Rate": "8.70",
            "modifiers": [
                "Beet Salada(3.00)",
                "Seasoned Fries(4.00)"
            ],
            "printer_name": "XP-80"
        }
    ],
    "Settings": {
        "PrinterName": "",
        "PrinterType": "Default",
        "customer_no": "1",
        "ItemLength": 46,
        "PrintLogo": "https://pos.tradywork.com/images/64981c79510befde7377d6be8d2a53f6.png",
        "qr_path_content": "AQlET09SIFNIT1ACCTIyMjIyMjIyMgMTMjAyMi0wMi0wM1QxMzoyMTo0MQQCMTYFATI=",
        "ThankYouNote": "Thank you for visiting us!",
        "vat_title": "VAT",
        "vat_no": "222222222",
        "invoice_no": "000076",
        "sale_date": "03/02/2022 13:21",
        "sales_man": "Trady Admin",
        "customer_name": "Walk-in Customer",
        "customer_phone": "",
        "customer_address": "",
        "payment_name": "Cash",
        "waiter_name": "Waiter user",
        "ThankYouNote2": "",
        "EIDRMK": "",
        "PrintType": "invoice",
        "PageSize": "",
        "auto_print_kot": "1",
        "auto_print_bot": "1"
    }
}"""
;
    setState(() {
      complexTutorial = Autogenerated.fromJson(jsonDecode(complexText));
    });

    print(complexTutorial);
    checkprinterlist();
  }

  Autogenerated complexTutorial;
  var itemdatalist;
  checkprinterlist() {
    setState(() {
      printerlist =
          complexTutorial.item.where((l) => seen.add(l.printerName)).toList();
    });
    return seen;
//  for (int i = 0; i < seen.length; i++){
//  fd =   complexTutorial.item.where((d) => d.printerName==seen.toList()[i]);
// print(fd.length);

//                   }
    // printDemoReceipt(printerlist);
    // testPrint(fd.toList()[0].printerName, sd);
// print(printerlist);
  }

  Future<void> testReceipt(NetworkPrinter printer) async {
    printer.text(
        'Regular: aA bB cC dD eE fF gG hH iI jJ kK lL mM nN oO pP qQ rR sS tT uU vV wW xX yY zZ');
    printer.text('Special 1: àÀ èÈ éÉ ûÛ üÜ çÇ ôÔ',
        styles: PosStyles(codeTable: 'CP1252'));
    printer.text('Special 2: blåbærgrød',
        styles: PosStyles(codeTable: 'CP1252'));

    printer.text('Bold text', styles: PosStyles(bold: true));
    printer.text('Reverse text', styles: PosStyles(reverse: true));
    printer.text('Underlined text',
        styles: PosStyles(underline: true), linesAfter: 1);
    printer.text('Align left', styles: PosStyles(align: PosAlign.left));
    printer.text('Align center', styles: PosStyles(align: PosAlign.center));
    printer.text('Align right',
        styles: PosStyles(align: PosAlign.right), linesAfter: 1);

    printer.row([
      PosColumn(
        text: 'col3',
        width: 3,
        styles: PosStyles(align: PosAlign.center, underline: true),
      ),
      PosColumn(
        text: 'col6',
        width: 6,
        styles: PosStyles(align: PosAlign.center, underline: true),
      ),
      PosColumn(
        text: 'col3',
        width: 3,
        styles: PosStyles(align: PosAlign.center, underline: true),
      ),
    ]);

    printer.text('Text size 200%',
        styles: PosStyles(
          height: PosTextSize.size2,
          width: PosTextSize.size2,
        ));

    // Print image
    final ByteData data = await rootBundle.load('assets/logo.png');
    final Uint8List bytes = data.buffer.asUint8List();
    final Image image = decodeImage(bytes);
    printer.image(image);
    // Print image using alternative commands
    // printer.imageRaster(image);
    // printer.imageRaster(image, imageFn: PosImageFn.graphics);

    // Print barcode
    final List<int> barData = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 4];
    printer.barcode(Barcode.upcA(barData));

    // Print mixed (chinese + latin) text. Only for printers supporting Kanji mode
    // printer.text(
    //   'hello ! 中文字 # world @ éphémère &',
    //   styles: PosStyles(codeTable: PosCodeTable.westEur),
    //   containsChinese: true,
    // );

    printer.feed(2);
    printer.cut();
  }

  Future<void> printDemoReceipt(NetworkPrinter printer) async {
    print(seen);
    for (int i = 0; i < seen.length; i++) {
    
      var printitemlist =
          complexTutorial.item.where((e) => e.printerName == seen.toList()[i]);

      print(printitemlist);
      printer.row([
        PosColumn(
            text: complexTutorial.settings.customerNo,
            width: 9,
            styles: PosStyles(align: PosAlign.left, width: PosTextSize.size3)),
        PosColumn(
            text: '',
            width: 3,
            styles: PosStyles(align: PosAlign.right, width: PosTextSize.size2)),
      ]);
      printer.row([
        PosColumn(
            text: 'TradyWork',
            width: 8,
            styles: PosStyles(align: PosAlign.right, width: PosTextSize.size2)),
        PosColumn(
          text: '',
          width: 4,
          styles: PosStyles(align: PosAlign.right, width: PosTextSize.size2),
        ),
      ]);
      printer.text('');
      printer.row([
        PosColumn(text: "Bill No: ", width: 4),
        PosColumn(
            text: complexTutorial.header.billNo,
            width: 8,
            styles: PosStyles(align: PosAlign.left)),
      ]);
      printer.row([
        PosColumn(text: "Date Time:", width: 4),
        PosColumn(
            text: complexTutorial.header.dateOfBill,
            width: 8,
            styles: PosStyles(align: PosAlign.left)),
      ]);
      printer.row([
        PosColumn(text: "Order Type:", width: 4),
        PosColumn(
            text: complexTutorial.header.orderType,
            width: 8,
            styles: PosStyles(align: PosAlign.left)),
      ]);
      printer.hr();
      printer.row([
        PosColumn(
            text: 'ItemName',
            width: 5,
            styles: PosStyles(align: PosAlign.left, width: PosTextSize.size2)),
        PosColumn(
            text: 'Qty',
            width: 7,
            styles: PosStyles(align: PosAlign.right, width: PosTextSize.size2)),
      ]);
      printer.hr();
      for (int j = 0; j < printitemlist.length; j++) {
        printer.row([
          PosColumn(text: printitemlist.toList()[j].itemName, width: 5),
          PosColumn(
              text: printitemlist.toList()[j].qty,
              width: 7,
              styles: PosStyles(align: PosAlign.right)),
        ]);for (int k = 0; k < printitemlist.toList()[j].modifiers.length; k++){
 printer.row([
          PosColumn(text: printitemlist.toList()[j].modifiers[k], width: 5),
          PosColumn(
              text: "",
              width: 7,
              styles: PosStyles(align: PosAlign.right)),
        ]);
        }
      }
      printer.hr();
      printer.feed(1);
      printer.cut();
    }
  }

  Future<void> cashDemoReceipt(NetworkPrinter printer) async{
      final ByteData data = await rootBundle.load('asset/trady.png');
    final Uint8List bytes = data.buffer.asUint8List();
    final Image image = decodeImage(bytes);
    
    printer.image(image);
   printer.row([
        PosColumn(
            text: 'TradyWork',
            width: 12,
            styles: PosStyles(align: PosAlign.center, width: PosTextSize.size2)),
        // PosColumn(
        //   text: '',
        //   width: 4,
        //   styles: PosStyles(align: PosAlign.center, width: PosTextSize.size2),
        // ),
      ]);
         printer.row([
        PosColumn(
            text: 'Tel:9875675678',
            width: 12,
            styles: PosStyles(align: PosAlign.center, width: PosTextSize.size1)),
        // PosColumn(
        //   text: '',
        //   width: 5,
        //   styles: PosStyles(align: PosAlign.center, width: PosTextSize.size2),
        // ),
      ]);    printer.row([
        PosColumn(
            text: 'VAT : 123423',
            width: 12,
            styles: PosStyles(align: PosAlign.center, width: PosTextSize.size1)),
        // PosColumn(
        //   text: '',
        //   width: 5,
        //   styles: PosStyles(align: PosAlign.center, width: PosTextSize.size2),
        // ),
      ]);
      printer.row([
        PosColumn(
            text: 'No.:34',
            width: 12,
            styles: PosStyles(align: PosAlign.center, width: PosTextSize.size2)),
        // PosColumn(
        //   text: '',
        //   width: 4,
        //   styles: PosStyles(align: PosAlign.center, width: PosTextSize.size2),
        // ),
      ]);
       
         printer.row([
        PosColumn(
            text: 'Invoice No: 0001210',
            width: 12,
            styles: PosStyles(align: PosAlign.center, width: PosTextSize.size1)),
        // PosColumn(
        //   text: '',
        //   width: 5,
        //   styles: PosStyles(align: PosAlign.center, width: PosTextSize.size2),
        // ),
      ]);
         printer.row([
        PosColumn(
            text: 'Simplified Tax Invoice',
            width: 12,
            styles: PosStyles(align: PosAlign.center, width: PosTextSize.size1)),
        // PosColumn(
        //   text: '',
        //   width: 5,
        //   styles: PosStyles(align: PosAlign.center, width: PosTextSize.size2),
        // ),
      ]);
      printer.hr();
          printer.row([
      PosColumn(text: 'Date : ', width: 6,styles:PosStyles(align: PosAlign.left,width: PosTextSize.size1)),
      PosColumn(text: complexTutorial.header.dateOfBill, width: 4, styles: PosStyles(align: PosAlign.left,width: PosTextSize.size1)),
      PosColumn(
          text: '', width: 1, styles: PosStyles(align: PosAlign.right,width: PosTextSize.size1)),
      PosColumn(
          text: '', width: 1, styles: PosStyles(align: PosAlign.right,width: PosTextSize.size1)),
    ]);
          printer.row([
      PosColumn(text: 'Seller :', width: 6,styles:PosStyles(align: PosAlign.left,width: PosTextSize.size1)),
      PosColumn(text: complexTutorial.header.dateOfBill, width: 4, styles: PosStyles(align: PosAlign.left,width: PosTextSize.size1)),
      PosColumn(
          text: '', width: 1, styles: PosStyles(align: PosAlign.right,width: PosTextSize.size1)),
      PosColumn(
          text: '', width: 1, styles: PosStyles(align: PosAlign.right,width: PosTextSize.size1)),
    ]);
          printer.row([
      PosColumn(text: 'Customer:', width: 6,styles:PosStyles(align: PosAlign.left,width: PosTextSize.size1)),
      PosColumn(text: complexTutorial.header.orderType, width: 4, styles: PosStyles(align: PosAlign.left,width: PosTextSize.size1)),
      PosColumn(
          text: '', width: 1, styles: PosStyles(align: PosAlign.right,width: PosTextSize.size1)),
      PosColumn(
          text: '', width: 1, styles: PosStyles(align: PosAlign.right,width: PosTextSize.size1)),
    ]);
      // printer.row([
      //   PosColumn(text: "Date : ", width: 8),
      //   PosColumn(
      //       text: complexTutorial.header.dateOfBill,
      //       width: 4,
      //       styles: PosStyles(align: PosAlign.left)
      //       ),
      // ]);
      // printer.row([
      //   PosColumn(text: "Seller :", width: 8),
      //   PosColumn(
      //       text: complexTutorial.header.dateOfBill,
      //       width: 4,
      //       styles: PosStyles(align: PosAlign.left)),
      // ]);
      // printer.row([
      //   PosColumn(text: "Customer:", width: 8),
      //   PosColumn(
      //       text: complexTutorial.header.orderType,
      //       width: 4,
      //       styles: PosStyles(align: PosAlign.left)),
      // ]);
      printer.hr();
       printer.row([
      PosColumn(text: 'Menu Item', width: 6,styles:PosStyles(align: PosAlign.left,width: PosTextSize.size1)),
      PosColumn(text: 'Qty', width: 2, styles: PosStyles(align: PosAlign.right,width: PosTextSize.size1)),
      PosColumn(
          text: 'Price', width: 2, styles: PosStyles(align: PosAlign.right,width: PosTextSize.size1)),
      PosColumn(
          text: 'Total', width: 2, styles: PosStyles(align: PosAlign.right,width: PosTextSize.size1)),
    ]);
     printer.hr();
for (int i = 0; i < complexTutorial.item.length; i++){
var printsplit= splitByLength(complexTutorial.item[i].itemName, 19);

print(printsplit);
  // var splititemname = complexTutorial.item[i].itemName.split(new RegExp(r"[1-2]"));
    printer.row([
       PosColumn(text: printsplit[0], width: 6,styles:PosStyles(width: PosTextSize.size1) ),
      PosColumn(text: complexTutorial.item[i].qty, width: 2, styles: PosStyles(align: PosAlign.right,width: PosTextSize.size1)),
      PosColumn(
          text: complexTutorial.item[i].rate, width: 2, styles: PosStyles(align: PosAlign.right,width: PosTextSize.size1)),
      PosColumn(
          text: complexTutorial.item[i].itemAmt, width: 2, styles: PosStyles(align: PosAlign.right,width: PosTextSize.size1)),
    ]);
    if(printsplit.length >1){
      int skip=1;
for (int t = 1; t < printsplit.length; t++){
 printer.row([
       PosColumn(text: printsplit[t], width: 5,styles:PosStyles(width: PosTextSize.size1,align: PosAlign.left,) ),
        PosColumn(text: "", width: 7,styles:PosStyles(width: PosTextSize.size1,align: PosAlign.right,) ),
    ]);
    // skip= skip +1;
    }
    }
    
    for (int k = 0; k < complexTutorial.item[i].modifiers.length; k++){
 printer.row([
          PosColumn(text: complexTutorial.item[i].modifiers[k], width: 5,styles: PosStyles(align: PosAlign.right)),
          PosColumn(
              text: "",
              width: 7,
              styles: PosStyles(align: PosAlign.right)),
        ]);
        }
}
  printer.hr();
     printer.row([
        PosColumn(
            text: 'Total',
            width: 5,
            styles: PosStyles(align: PosAlign.left, width: PosTextSize.size2)),
        PosColumn(
            text: '350.00',
            width: 7,
            styles: PosStyles(align: PosAlign.right, width: PosTextSize.size2)),
      ]);
       printer.hr();
       for (int i = 0; i < complexTutorial.billSummary.length; i++){
     printer.row([
        PosColumn(
            text: complexTutorial.billSummary[i].key,
            width: 5,
            styles: PosStyles(align: PosAlign.left, width: PosTextSize.size1)),
        PosColumn(
            text: complexTutorial.billSummary[i].value,
            width: 7,
            styles: PosStyles(align: PosAlign.right, width: PosTextSize.size1)),
      ]);
}
 printer.hr();
    printer.row([
        PosColumn(
            text: 'GrandTotal',
            width: 5,
            styles: PosStyles(align: PosAlign.left, width: PosTextSize.size1)),
        PosColumn(
            text: '402.00',
            width: 7,
            styles: PosStyles(align: PosAlign.right, width: PosTextSize.size1)),
      ]);
      printer.hr();
     
    try  {
      const String qrData = 'example.com';
      const double qrSize = 200;
      final uiImg =  QrPainter(
        data: qrData,
        version: QrVersions.auto,
        gapless: false,
      ).toImageData(qrSize);
   
    } catch (e) {
      print(e);
    }

    printer.qrcode('example.com');
    printer.text("");
     printer.row([
        PosColumn(
            text: 'Thank you for visiting us!',
            width: 8,
            styles: PosStyles(align: PosAlign.right, width: PosTextSize.size1)),
        PosColumn(
          text: '',
          width: 4,
          styles: PosStyles(align: PosAlign.center, width: PosTextSize.size1),
        ),
      ]);
       printer.text("");
     printer.row([
        PosColumn(
            text: 'Trady Work',
            width: 8,
            styles: PosStyles(align: PosAlign.right, width: PosTextSize.size2)),
        PosColumn(
          text: '',
          width: 4,
          styles: PosStyles(align: PosAlign.center, width: PosTextSize.size2),
        ),
      ]);
      printer.cut();
      
  }
    List<String> splitByLength(String value, int length) {
  List<String> pieces = [];

  for (int i = 0; i < value.length; i += length) {
    int offset = i + length;
    pieces.add(value.substring(i, offset >= value.length ? value.length : offset));
  }
  return pieces;
}
  void testPrint(String printerIp, BuildContext ctx) async {
    const PaperSize paper = PaperSize.mm80;
    final profile = await CapabilityProfile.load();
    final printer = NetworkPrinter(paper, profile);

    final PosPrintResult res = await printer.connect(printerIp, port: 9100);

    if (res == PosPrintResult.success) {
      // DEMO RECEIPT
    await printDemoReceipt(printer);
      await cashDemoReceipt(printer);
      // TEST PRINT
      // await testReceipt(printer);
      printer.disconnect();
    }

    // final snackBar =
    //     SnackBar(content: Text(res.msg, textAlign: TextAlign.center));
    // Scaffold.of(ctx).showSnackBar(snackBar);
  }
 var urlText;
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Discover Printers'),
      ),
      body:
      WebView(initialUrl:urlText , javascriptMode: JavascriptMode.unrestricted,
              javascriptChannels: <JavascriptChannel>{
            JavascriptChannel(
                name: 'messageHandler',
                onMessageReceived: (JavascriptMessage message) async{
                  testPrint("192.168.0.115", context);
                })}),
           floatingActionButton: new FloatingActionButton(
      tooltip: 'Add',
      child: new Icon(Icons.add),
    
      onPressed: (){
        showDialog(context: context, builder: (ctxt) => new AlertDialog(content: 
        Container(
          height: 600,
          width: 1500,
          child: 
         Builder(
        builder: (BuildContext context) {
          return Container(
            padding: EdgeInsets.symmetric(horizontal: 10, vertical: 20),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: <Widget>[
                TextField(
                  controller: portController,
                  keyboardType: TextInputType.number,
                  decoration: InputDecoration(
                    labelText: 'Port',
                    hintText: 'Port',
                  ),
                ),
                SizedBox(height: 10),
                Text('Local ip: $localIp', style: TextStyle(fontSize: 16)),
                SizedBox(height: 15),
                RaisedButton(
                    child: Text(
                        '${isDiscovering ? 'Discovering...' : 'Discover'}'),
                    onPressed: isDiscovering ? null : () => discover(context)),
                SizedBox(height: 15),
                found >= 0
                    ? Text('Found: $found device(s)',
                        style: TextStyle(fontSize: 16))
                    : Container(),
                Expanded(
                  child: ListView.builder(
                    itemCount: devices.length,
                    itemBuilder: (BuildContext context, int index) {
                      return InkWell(
                        onTap: () => testPrint(devices[index], context),
                        child: Column(
                          children: <Widget>[
                            Container(
                              height: 60,
                              padding: EdgeInsets.only(left: 10),
                              alignment: Alignment.centerLeft,
                              child: Row(
                                children: <Widget>[
                                  Icon(Icons.print),
                                  SizedBox(width: 10),
                                  Expanded(
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      mainAxisAlignment:
                                          MainAxisAlignment.center,
                                      children: <Widget>[
                                        Text(
                                          '${devices[index]}:${portController.text}',
                                          style: TextStyle(fontSize: 16),
                                        ),
                                        Text(
                                          'Click to print a test receipt',
                                          style: TextStyle(
                                              color: Colors.grey[700]),
                                        ),
                                      ],
                                    ),
                                  ),
                                  Icon(
                                    Icons.chevron_right,
                                    color: Colors.red,
                                  ),
                                ],
                              ),
                            ),
                            Divider(),
                          ],
                        ),
                      );
                    },
                  ),
                )
              ],
            ),
          );
        },
      )),));
      //  return   showDialog(
      //           context: context,
      //           builder: (ctxt) => new AlertDialog(
      //             title: Text("Text Dialog"),
      //             content:
      //     Container(
      //       height: 400,
      //       width: 200,
      //       padding: EdgeInsets.symmetric(horizontal: 10, vertical: 20),
      //       child: Column(
      //         crossAxisAlignment: CrossAxisAlignment.center,
      //         children: <Widget>[
      //           TextField(
      //             controller: portController,
      //             keyboardType: TextInputType.number,
      //             decoration: InputDecoration(
      //               labelText: 'Port',
      //               hintText: 'Port',
      //             ),
      //           ),
      //           SizedBox(height: 10),
      //           Text('Local ip: $localIp', style: TextStyle(fontSize: 16)),
      //           SizedBox(height: 15),
      //           RaisedButton(
      //               child: Text(
      //                   '${isDiscovering ? 'Discovering...' : 'Discover'}'),
      //               onPressed: isDiscovering ? null : () => discover(context)),
      //           SizedBox(height: 15),
      //           found >= 0
      //               ? Text('Found: $found device(s)',
      //                   style: TextStyle(fontSize: 16))
      //               : Container(),
      //           Expanded(
      //             child: ListView.builder(
      //               itemCount: devices.length,
      //               itemBuilder: (BuildContext context, int index) {
      //                 return InkWell(
      //                   onTap: () => testPrint(devices[index], context),
      //                   child: Column(
      //                     children: <Widget>[
      //                       Container(
      //                         height: 60,
      //                         padding: EdgeInsets.only(left: 10),
      //                         alignment: Alignment.centerLeft,
      //                         child: Row(
      //                           children: <Widget>[
      //                             Icon(Icons.print),
      //                             SizedBox(width: 10),
      //                             Expanded(
      //                               child: Column(
      //                                 crossAxisAlignment:
      //                                     CrossAxisAlignment.start,
      //                                 mainAxisAlignment:
      //                                     MainAxisAlignment.center,
      //                                 children: <Widget>[
      //                                   Text(
      //                                     '${devices[index]}:${portController.text}',
      //                                     style: TextStyle(fontSize: 16),
      //                                   ),
      //                                   Text(
      //                                     'Click to print a test receipt',
      //                                     style: TextStyle(
      //                                         color: Colors.grey[700]),
      //                                   ),
      //                                 ],
      //                               ),
      //                             ),
      //                             Icon(
      //                               Icons.chevron_right,
      //                               color: Colors.red,
      //                             ),
      //                           ],
      //                         ),
      //                       ),
      //                       Divider(),
      //                     ],
      //                   ),
      //                 );
      //               },
      //             ),
      //           )
      //         ],
      //       ),
      //     )
       
      //       )
      //     );
        }     
      ),   
      //  Builder(
      //   builder: (BuildContext context) {
      //     return Container(
      //       padding: EdgeInsets.symmetric(horizontal: 10, vertical: 20),
      //       child: Column(
      //         crossAxisAlignment: CrossAxisAlignment.center,
      //         children: <Widget>[
      //           TextField(
      //             controller: portController,
      //             keyboardType: TextInputType.number,
      //             decoration: InputDecoration(
      //               labelText: 'Port',
      //               hintText: 'Port',
      //             ),
      //           ),
      //           SizedBox(height: 10),
      //           Text('Local ip: $localIp', style: TextStyle(fontSize: 16)),
      //           SizedBox(height: 15),
      //           RaisedButton(
      //               child: Text(
      //                   '${isDiscovering ? 'Discovering...' : 'Discover'}'),
      //               onPressed: isDiscovering ? null : () => discover(context)),
      //           SizedBox(height: 15),
      //           found >= 0
      //               ? Text('Found: $found device(s)',
      //                   style: TextStyle(fontSize: 16))
      //               : Container(),
      //           Expanded(
      //             child: ListView.builder(
      //               itemCount: devices.length,
      //               itemBuilder: (BuildContext context, int index) {
      //                 return InkWell(
      //                   onTap: () => testPrint(devices[index], context),
      //                   child: Column(
      //                     children: <Widget>[
      //                       Container(
      //                         height: 60,
      //                         padding: EdgeInsets.only(left: 10),
      //                         alignment: Alignment.centerLeft,
      //                         child: Row(
      //                           children: <Widget>[
      //                             Icon(Icons.print),
      //                             SizedBox(width: 10),
      //                             Expanded(
      //                               child: Column(
      //                                 crossAxisAlignment:
      //                                     CrossAxisAlignment.start,
      //                                 mainAxisAlignment:
      //                                     MainAxisAlignment.center,
      //                                 children: <Widget>[
      //                                   Text(
      //                                     '${devices[index]}:${portController.text}',
      //                                     style: TextStyle(fontSize: 16),
      //                                   ),
      //                                   Text(
      //                                     'Click to print a test receipt',
      //                                     style: TextStyle(
      //                                         color: Colors.grey[700]),
      //                                   ),
      //                                 ],
      //                               ),
      //                             ),
      //                             Icon(
      //                               Icons.chevron_right,
      //                               color: Colors.red,
      //                             ),
      //                           ],
      //                         ),
      //                       ),
      //                       Divider(),
      //                     ],
      //                   ),
      //                 );
      //               },
      //             ),
      //           )
      //         ],
      //       ),
      //     );
      //   },
      // ),
    );
  }
}
